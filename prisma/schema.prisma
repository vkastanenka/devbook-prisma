generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           String  @id @default(uuid())
  unitNumber   String? @map("unit_number")
  streetNumber String  @map("street_number")
  streetName   String  @map("street_name")
  suburb       String
  state        String
  country      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id")

  @@unique([userId])
  @@map("addresses")
}

model Comment {
  id   String @id @default(uuid())
  body String @db.Text()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  parentComment   Comment? @relation("CommentSubComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId String?  @map("parent_comment_id")
  post            Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String   @map("post_id")
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @map("user_id")

  subComments  Comment[]     @relation("CommentSubComments")

  @@map("comments")
}

enum PostType {
  DEFAULT
}

model Post {
  id       String   @id @default(uuid())
  body     String   @db.Text()
  postType PostType @default(DEFAULT)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  comments  Comment[]
  postLikes PostLike[]

  @@map("posts")
}

model PostLike {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_id")
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("post_likes")
}

model Session {
  id      String   @id @default(uuid())
  expires DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([userId])
  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  username    String   @unique
  password    String
  phone       String?
  pronouns    String?
  image       String?
  headline    String?
  bio         String?  @db.Text
  website     String?
  githubRepos String[] @map("github_repos")
  skills      String[]

  role UserRole @default(USER)

  resetPasswordToken        String?   @map("reset_password_token")
  resetPasswordTokenExpires DateTime? @map("reset_password_token_expires")
  passwordUpdatedAt         DateTime? @map("password_update_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  addresses       Address[]
  comments        Comment[]
  contacts        User[]           @relation("contacts")
  contactsOf      User[]           @relation("contacts")
  posts           Post[]
  postLikes       PostLike[]
  sessions        Session[]
  userEducations  UserEducation[]
  userExperiences UserExperience[]

  @@map("users")
}

model UserEducation {
  id        String  @id @default(uuid())
  school    String
  degree    String
  startYear String  @map("start_year")
  endYear   String? @map("end_year")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("user_educations")
}

model UserExperience {
  id          String  @id @default(uuid())
  company     String
  type        String
  schedule    String
  title       String
  description String
  startYear   String  @map("start_year")
  endYear     String? @map("end_year")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("user_experiences")
}
